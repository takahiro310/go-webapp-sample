// Package model contains the types for schema 'sample'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Test represents a row from 'sample.test'.
type Test struct {
	ID   int64          `json:"id"`   // id
	Name sql.NullString `json:"name"` // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Test exists in the database.
func (t *Test) Exists() bool {
	return t._exists
}

// Deleted provides information if the Test has been deleted from the database.
func (t *Test) Deleted() bool {
	return t._deleted
}

// Insert inserts the Test to the database.
func (t *Test) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sample.test (` +
		`name` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, t.Name)
	res, err := db.Exec(sqlstr, t.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.ID = int64(id)
	t._exists = true

	return nil
}

// Update updates the Test in the database.
func (t *Test) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sample.test SET ` +
		`name = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, t.Name, t.ID)
	_, err = db.Exec(sqlstr, t.Name, t.ID)
	return err
}

// Save saves the Test to the database.
func (t *Test) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Delete deletes the Test from the database.
func (t *Test) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sample.test WHERE id = ?`

	// run query
	XOLog(sqlstr, t.ID)
	_, err = db.Exec(sqlstr, t.ID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}
