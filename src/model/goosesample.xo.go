// Package model contains the types for schema 'sample'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// GooseSample represents a row from 'sample.goose_sample'.
type GooseSample struct {
	ID        uint      `json:"id"`         // id
	Content   string    `json:"content"`    // content
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GooseSample exists in the database.
func (gs *GooseSample) Exists() bool {
	return gs._exists
}

// Deleted provides information if the GooseSample has been deleted from the database.
func (gs *GooseSample) Deleted() bool {
	return gs._deleted
}

// Insert inserts the GooseSample to the database.
func (gs *GooseSample) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if gs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sample.goose_sample (` +
		`id, content, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, gs.ID, gs.Content, gs.CreatedAt, gs.UpdatedAt)
	_, err = db.Exec(sqlstr, gs.ID, gs.Content, gs.CreatedAt, gs.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	gs._exists = true

	return nil
}

// Update updates the GooseSample in the database.
func (gs *GooseSample) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if gs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sample.goose_sample SET ` +
		`content = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, gs.Content, gs.CreatedAt, gs.UpdatedAt, gs.ID)
	_, err = db.Exec(sqlstr, gs.Content, gs.CreatedAt, gs.UpdatedAt, gs.ID)
	return err
}

// Save saves the GooseSample to the database.
func (gs *GooseSample) Save(db XODB) error {
	if gs.Exists() {
		return gs.Update(db)
	}

	return gs.Insert(db)
}

// Delete deletes the GooseSample from the database.
func (gs *GooseSample) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !gs._exists {
		return nil
	}

	// if deleted, bail
	if gs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sample.goose_sample WHERE id = ?`

	// run query
	XOLog(sqlstr, gs.ID)
	_, err = db.Exec(sqlstr, gs.ID)
	if err != nil {
		return err
	}

	// set deleted
	gs._deleted = true

	return nil
}
